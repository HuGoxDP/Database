SET FOREIGN_KEY_CHECKS=0;
SET GLOBAL FOREIGN_KEY_CHECKS=0;

DROP DATABASE IF EXISTS abc;
CREATE DATABASE IF NOT EXISTS abc;


DROP TABLE IF EXISTS homework1;
CREATE TABLE IF NOT EXISTS homework1(

Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
Code INT NOT NULL references code(code_name),
New BOOLEAN NOT NULL DEFAULT '0',
Title VARCHAR(100) NOT NULL,
Price FLOAT(30) NOT NULL DEFAULT'0',
Edition_id INT NOT NULL,
Pages INT NOT NULL,
Format VARCHAR(40) DEFAULT 'Nothing',
Data DATE DEFAULT NULL,
Circulation INT NOT NULL CHECK(Circulation <= 5000),
Topic_id INT NOT NULL,
Category_Id INT NOT NULL
); 
ALTER TABLE homework1 ADD CONSTRAINT Category_Id FOREIGN KEY (Category_Id) REFERENCES category (CategoryId),
ADD CONSTRAINT Edition_id  FOREIGN KEY (Edition_id) REFERENCES edition (EditionId),
ADD CONSTRAINT Topic_id  FOREIGN KEY (Topic_id) REFERENCES topic (TopicId); 

LOAD DATA INFILE 'TXT.txt '
INTO TABLE homework1;

DROP TABLE IF EXISTS Edition;
CREATE TABLE IF NOT EXISTS Edition(
EditionId INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
Edition_Name VARCHAR(100) NOT NULL );
CREATE UNIQUE INDEX EditionIndx ON Edition(Edition_Name); 
LOAD DATA INFILE 'edition.txt '
INTO TABLE edition;   

DROP TABLE IF EXISTS Topic;
CREATE TABLE IF NOT EXISTS Topic(
TopicId INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
Topic_Name VARCHAR(40) NOT NULL );
CREATE UNIQUE INDEX TopicIndx ON Topic(Topic_Name);  
LOAD DATA INFILE 'Topic.txt '
INTO TABLE Topic;

DROP TABLE IF EXISTS Category;
CREATE TABLE IF NOT EXISTS Category(
CategoryId INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
Category_Name VARCHAR(40) NOT NULL );
CREATE UNIQUE INDEX CategoryIndx ON Category(Category_Name);  
LOAD DATA INFILE 'Category.txt '
INTO TABLE Category;

DROP VIEW IF EXISTS viev_name;
CREATE VIEW IF NOT EXISTS viev_name AS
SELECT DISTINCT Id, Code, New, Title, Price, Edition_id, Pages, Format, Data, Circulation, Topic_Id, Category_Id FROM homework1
JOIN category ON category.CategoryId = homework1.Category_Id
JOIN edition ON edition.EditionId = homework1.Edition_id
JOIN topic ON topic.TopicId = homework1.Topic_id

1.	Вивести значення наступних колонок: назва книги, ціна, назва видавництва. Використовувати внутрішнє з'єднання, застосовуючи where.
SELECT homework1.Title, homework1.Price, edition.Edition_Name
FROM homework1 INNER JOIN edition
where homework1.Edition_id = edition.EditionId

2.	Вивести значення наступних колонок: назва книги, назва категорії. Використовувати внутрішнє з'єднання, застосовуючи inner join.
SELECT homework1.Title, category.Category_Name
FROM homework1 INNER JOIN category
ON homework1.Category_Id = category.CategoryId;

3.	Вивести значення наступних колонок: назва книги, ціна, назва видавництва, формат.
SELECT homework1.Title, homework1.Price, edition.Edition_Name, homework1.Format FROM homework1 INNER JOIN edition
ON homework1.Edition_id = edition.EditionId

4.	Вивести значення наступних колонок: тема, категорія, назва книги, назва видавництва. Фільтр по темам і категоріям.
SELECT topic.Topic_Name, category.Category_Name, homework1.Title, edition.Edition_Name FROM homework1 
 JOIN edition INNER JOIN category  JOIN topic 
ON homework1.Edition_id = edition.EditionId AND homework1.Topic_id = topic.TopicId 
AND homework1.Category_Id = category.CategoryId GROUP BY topic.TopicId, Category.CategoryId

5.	Вивести книги видавництва 'BHV', видані після 2000 р
SELECT homework1.* FROM homework1 JOIN edition WHERE homework1.Edition_id = edition.EditionId AND edition.Edition_Name LIKE"%BHV%" AND YEAR(DATA) > 2000;

6.	Вивести загальну кількість сторінок по кожній назві категорії. Фільтр по спадаючій кількості сторінок.
SELECT homework1.Pages, category.Category_Name FROM homework1 RIGHT JOIN category ON homework1.Category_Id = category.CategoryId GROUP BY Category.Category_Name ORDER BY homework1.Pages DESC

7.	Вивести середню вартість книг по темі 'Використання ПК' і категорії 'Linux'.
SELECT AVG(homework1.Price), category.Category_Name, topic.Topic_Name FROM homework1 JOIN category INNER JOIN topic WHERE homework1.Category_Id = category.CategoryId AND homework1.Topic_id = topic.TopicId AND topic.Topic_Name LIKE "%Використання ПК%" AND category.Category_Name LIKE"%Linux%" ;

8.	Вивести всі дані універсального відношення. Використовувати внутрішнє з'єднання, застосовуючи where.
SELECT homework1.Id,homework1.Code,homework1.New,homework1.Title,homework1.Price,edition.Edition_Name,homework1.Pages,homework1.Format,homework1.Data,homework1.Circulation, topic.Topic_Name, category.Category_Name
FROM homework1 INNER JOIN edition, category, topic
where homework1.Edition_id = edition.EditionId and homework1.Category_Id = category.CategoryId AND homework1.Topic_id = topic.TopicId;

9.	Вивести всі дані універсального відношення. Використовувати внутрішнє з'єднання, застосовуючи inner join.
SELECT homework1.Id,homework1.Code,homework1.New,homework1.Title,homework1.Price,edition.Edition_Name,homework1.Pages,homework1.Format,homework1.Data,homework1.Circulation, topic.Topic_Name, category.Category_Name FROM homework1 
 INNER JOIN category INNER JOIN topic INNER JOIN edition ON homework1.Category_Id = category.CategoryId AND homework1.Topic_id = topic.TopicId AND edition.EditionId = homework1.Edition_id;

10.	Вивести всі дані універсального відношення. Використовувати зовнішнє з'єднання, застосовуючи left join / rigth join.
SELECT DISTINCT homework1.Id,homework1.Code,homework1.New,homework1.Title,homework1.Price,edition.Edition_Name,homework1.Pages,homework1.Format,homework1.Data,homework1.Circulation, topic.Topic_Name, category.Category_Name FROM homework1 
LEFT/Right JOIN category ON homework1.Category_Id = category.CategoryId
LEFT/Right join topic ON homework1.Topic_id = topic.TopicId
LEFT/Right join edition ON edition.EditionId = homework1.Edition_id;

11.	Вивести пари книг, що мають однакову кількість сторінок. Використовувати само об’єднання і аліаси (self join).
SELECT F.Title AS first_book, S.Title AS second_book from homework1 F, homework1 S WHERE
F.Pages = S.Pages GROUP BY F.Title, S.Title

12.	Вивести тріади книг, що мають однакову ціну. Використовувати самооб'єднання і аліаси (self join).
SELECT F.Title AS first_book, S.Title AS second_book, T.Title AS third_book from homework1 F, homework1 S, homework1 T WHERE F.Price = S.Price AND F.Price = T.Price AND S.Price = T.Price GROUP BY F.Title, S.Title, T.Title;

13.	Вивести всі книги категорії 'C ++'. Використовувати підзапити (subquery).
SELECT Title FROM homework1 WHERE Category_Id = (SELECT CategoryId FROM category WHERE Category_Name LIKE "%C++%")

14.	Вивести книги видавництва 'BHV', видані після 2000 р Використовувати підзапити (subquery).
SELECT Title FROM homework1 WHERE Edition_id = (SELECT edition.EditionId FROM edition WHERE edition.Edition_Name LIKE "%BHV%") ANd Year(Data) > 2000

15.	Вивести список видавництв, у яких розмір книг перевищує 400 сторінок. Використовувати пов'язані підзапити (correlated subquery).
SELECT Edition_Name FROM edition WHERE edition.EditionId IN (SELECT Edition_id FROM homework1 WHERE Pages > 400) 

16.	Вивести список категорій в яких більше 3-х книг. Використовувати пов'язані підзапити (correlated subquery).
SELECT Category_Name FROM category WHERE category.CategoryId IN (SELECT Category_Id FROM homework1  GROUP by Category_Id HAVING COUNT(title) > 3 ) 

17.	Вивести список книг видавництва 'BHV', якщо в списку є хоча б одна книга цього видавництва. Використовувати exists.
SELECT Title FROM homework1 WHERE EXISTS (SELECT Edition_Name FROM edition WHERE homework1.Edition_id = edition.EditionId and Edition_Name LIKE "%BHV%")
	
18.	Вивести список книг видавництва 'BHV', якщо в списку немає жодної книги цього видавництва. Використовувати not exists.
SELECT Title FROM homework1 WHERE NOT EXISTS (SELECT Edition_Name FROM edition WHERE homework1.Edition_id = edition.EditionId and Edition_Name LIKE "%BHV%")

19.	Вивести відсортований загальний список назв тем і категорій. Використовувати union.
SELECT category.Category_Name FROM category UNION SELECT topic.Topic_Name FROM topic

20.	Вивести відсортований в зворотному порядку загальний список перших слів, назв книг і категорій що не повторюються. Використовувати union.
SELECT DISTINCT SUBSTRING_INDEX(category.Category_Name, " ", 1) AS categoryF  FROM category UNION SELECT DISTINCT SUBSTRING_INDEX( homework1.Title, " ", 1) FROM homework1 ORDER by categoryF DESC;










